services:
  kafka:
    build: ./kafka_broker
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_PORT: 9092
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    networks:
      - broker-kafka
    healthcheck:
      start_period: 15s # Wait initial (container startup) timeout
      test: python3 health_check.py || exit 1
      timeout: 5s # Wait 5 seconds, if no connection to kafka broker was established, connection failed
      interval: 30s # If a test has failed, wait 15 seconds and execute test again
      retries: 5 # Execute test 5 times

  # Reach UI under: http://localhost:8080
  akhq:
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:19092"
    ports:
      - 8080:8080
    links:
      - kafka
    networks:
      - broker-kafka

  elasticsearch:
    build: ./elasticsearch
    hostname: data-preparer
    container_name: data-preparer
    environment:
      ELASTICSEARCH_DATA_PREPARER_PORT: 9200
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
#      ELASTIC_USERNAME: "elastic"
#      ELASTIC_PASSWORD: "MagicWord"
#      xpack.security.enabled: "true"
      xpack.security.enabled: "false"
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data # For saving data outside, e.g. in a database
    networks:
      - broker-kafka
    healthcheck:
      start_period: 15s # Wait initial (container startup) timeout
      test: python3 health_check.py || exit 1
      timeout: 5s # Wait 5 seconds, if no connection to kafka broker was established, connection failed
      interval: 30s # If a test has failed, wait 15 seconds and execute test again
      retries: 5 # Execute test 5 times

  kibana:
    hostname: kibana
    container_name: kibana
    build: ./kibana
    restart: always
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      KIBANA_PORT: 5601
    ports:
      - 5601:5601
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - broker-kafka
    healthcheck:
      start_period: 15s # Wait initial (container startup) timeout
      test: sh import_dashboards.sh || exit 1
      timeout: 5s # Wait 5 seconds, if no connection to kafka broker was established, connection failed
      interval: 30s # If a test has failed, wait 15 seconds and execute test again
      retries: 5 # Execute test 5 times

  publisher:
    build: producer_service
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - broker-kafka
    environment:
      KAFKA_BROKER_PORT: 19092
      STONKS: "AAPL,MSFT"
      SERVICES: 2
      DAYS_OF_PREDICTIONS: 30
    deploy:
      mode: replicated
      replicas: 2

  consumer:
    build: consumer_service
    depends_on:
      publisher:
        condition: service_started
      elasticsearch:
          condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - broker-kafka
    environment:
      KAFKA_BROKER_PORT: 19092
      ELASTICSEARCH_DATA_PREPARER_PORT: 9200
      STONKS: "AAPL,MSFT"

networks:
  broker-kafka:
    driver: bridge

volumes:
  esdata:
    driver: local
